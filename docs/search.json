[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto5",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\nCommodore PET\n\n\nI’m an undergraduate senior biology student at the University of Massachusetts Amherst. I hope to continue my education in biology and genetics with a graduate program."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Lab 1\nLab 2\n\nThis placeholder text above was already here, but the title was changed to Labs in the _quarto.yml"
  },
  {
    "objectID": "lab.html",
    "href": "lab.html",
    "title": "Labs",
    "section": "",
    "text": "Currently working on making a website"
  },
  {
    "objectID": "Presentation.html",
    "href": "Presentation.html",
    "title": "Presentation",
    "section": "",
    "text": "knitr::include_url(\"Final_Project.html\")"
  },
  {
    "objectID": "Final.html",
    "href": "Final.html",
    "title": "Final Project",
    "section": "",
    "text": "if (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"treeio\")\nBiocManager::install(\"ggtreeExtra\")\n# Loading all the libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggtree)\n\nggtree v3.10.1 For help: https://yulab-smu.top/treedata-book/\n\nIf you use the ggtree package suite in published research, please cite\nthe appropriate paper(s):\n\nGuangchuang Yu, David Smith, Huachen Zhu, Yi Guan, Tommy Tsan-Yuk Lam.\nggtree: an R package for visualization and annotation of phylogenetic\ntrees with their covariates and other associated data. Methods in\nEcology and Evolution. 2017, 8(1):28-36. doi:10.1111/2041-210X.12628\n\nGuangchuang Yu.  Data Integration, Manipulation and Visualization of\nPhylogenetic Trees (1st edition). Chapman and Hall/CRC. 2022,\ndoi:10.1201/9781003279242\n\nGuangchuang Yu. Using ggtree to visualize data on tree-like structures.\nCurrent Protocols in Bioinformatics. 2020, 69:e96. doi:10.1002/cpbi.96\n\nAttaching package: 'ggtree'\n\nThe following object is masked from 'package:tidyr':\n\n    expand\n\nlibrary(knitr)\nlibrary(TDbook) #A Companion Package for the Book \"Data Integration, Manipulation and Visualization of Phylogenetic Trees\" by Guangchuang Yu (2022, ISBN:9781032233574).\nlibrary(ggimage)\nlibrary(rphylopic)\n\nYou are using rphylopic v.1.4.0. Please remember to credit PhyloPic contributors (hint: `get_attribution()`) and cite rphylopic in your work (hint: `citation(\"rphylopic\")`).\n\nAttaching package: 'rphylopic'\n\nThe following object is masked from 'package:ggimage':\n\n    geom_phylopic\n\nlibrary(treeio)\n\ntreeio v1.26.0 For help: https://yulab-smu.top/treedata-book/\n\nIf you use the ggtree package suite in published research, please cite\nthe appropriate paper(s):\n\nLG Wang, TTY Lam, S Xu, Z Dai, L Zhou, T Feng, P Guo, CW Dunn, BR\nJones, T Bradley, H Zhu, Y Guan, Y Jiang, G Yu. treeio: an R package\nfor phylogenetic tree input and output with richly annotated and\nassociated data. Molecular Biology and Evolution. 2020, 37(2):599-603.\ndoi: 10.1093/molbev/msz240\n\nGuangchuang Yu. Using ggtree to visualize data on tree-like structures.\nCurrent Protocols in Bioinformatics. 2020, 69:e96. doi:10.1002/cpbi.96\n\nGuangchuang Yu.  Data Integration, Manipulation and Visualization of\nPhylogenetic Trees (1st edition). Chapman and Hall/CRC. 2022,\ndoi:10.1201/9781003279242\n\nlibrary(tidytree)\n\nIf you use the ggtree package suite in published research, please cite\nthe appropriate paper(s):\n\nGuangchuang Yu, David Smith, Huachen Zhu, Yi Guan, Tommy Tsan-Yuk Lam.\nggtree: an R package for visualization and annotation of phylogenetic\ntrees with their covariates and other associated data. Methods in\nEcology and Evolution. 2017, 8(1):28-36. doi:10.1111/2041-210X.12628\n\nGuangchuang Yu.  Data Integration, Manipulation and Visualization of\nPhylogenetic Trees (1st edition). Chapman and Hall/CRC. 2022,\ndoi:10.1201/9781003279242\n\nAttaching package: 'tidytree'\n\nThe following object is masked from 'package:treeio':\n\n    getNodeNum\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nlibrary(ape)\n\n\nAttaching package: 'ape'\n\nThe following objects are masked from 'package:tidytree':\n\n    drop.tip, keep.tip\n\nThe following object is masked from 'package:treeio':\n\n    drop.tip\n\nThe following object is masked from 'package:ggtree':\n\n    rotate\n\nThe following object is masked from 'package:dplyr':\n\n    where\n\nlibrary(TreeTools)\n\n\nAttaching package: 'TreeTools'\n\nThe following object is masked from 'package:tidytree':\n\n    MRCA\n\nThe following object is masked from 'package:treeio':\n\n    MRCA\n\nThe following object is masked from 'package:ggtree':\n\n    MRCA\n\nlibrary(phytools)\n\nLoading required package: maps\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\n\nAttaching package: 'phytools'\n\nThe following object is masked from 'package:TreeTools':\n\n    as.multiPhylo\n\nThe following object is masked from 'package:treeio':\n\n    read.newick\n\nlibrary(ggnewscale)\nlibrary(ggtreeExtra)\n\nggtreeExtra v1.12.0 For help: https://yulab-smu.top/treedata-book/\n\nIf you use the ggtree package suite in published research, please cite\nthe appropriate paper(s):\n\nS Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L\nZhan, T Wu, E Hu, Y Jiang, X Bo, G Yu. ggtreeExtra: Compact\nvisualization of richly annotated phylogenetic data. Molecular Biology\nand Evolution. 2021, 38(9):4039-4042. doi: 10.1093/molbev/msab166\n\nlibrary(ggstar)\nlibrary(DT)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout"
  },
  {
    "objectID": "Final.html#this-code-was-used-to-load-the-data",
    "href": "Final.html#this-code-was-used-to-load-the-data",
    "title": "Final Project",
    "section": "This code was used to load the data:",
    "text": "This code was used to load the data:\n\nNEON_MAGs_Ind &lt;- read_csv(\"data/NEON/GOLD_Study_ID_Gs0161344_NEON.csv\") %&gt;%\n  filter(`Genome Name` != \"NEON combined assembly\") \n\nRows: 1754 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Bin ID, Genome Name, Bin Quality, Bin Lineage, GTDB-Tk Taxonomy L...\ndbl  (10): IMG Genome ID, Bin Completeness, Bin Contamination, Total Number ...\ndate  (1): Date Added\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNEON_MAGs_Ind_tax &lt;- NEON_MAGs_Ind %&gt;% \n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"), \"; \", remove = FALSE) \n\nWarning: Expected 6 pieces. Additional pieces discarded in 21 rows [12, 32, 66, 79, 80,\n88, 96, 102, 104, 240, 334, 386, 657, 790, 846, 931, 943, 983, 1041, 1095,\n...].\n\n\nWarning: Expected 6 pieces. Missing pieces filled with `NA` in 282 rows [6, 7, 42, 49,\n50, 55, 60, 83, 85, 97, 100, 105, 107, 113, 114, 116, 119, 125, 129, 130, ...].\n\n\n\nNEON_MAGs &lt;- read_csv(\"data/NEON/GOLD_Study_ID_Gs0161344_NEON_edArchaea.csv\") %&gt;% \n  # remove columns that are not needed for data analysis\n  select(-c(`GOLD Study ID`, `Bin Methods`, `Created By`, `Date Added`)) %&gt;% \n  # create a new column with the Assembly Type\n  mutate(\"Assembly Type\" = case_when(`Genome Name` == \"NEON combined assembly\" ~ `Genome Name`,\n                            TRUE ~ \"Individual\")) %&gt;% \n  mutate_at(\"Assembly Type\", str_replace, \"NEON combined assembly\", \"Combined\") %&gt;% \n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"), \"; \", remove = FALSE) %&gt;% \n  # Get rid of the the common string \"Soil microbial communities from \"\n  mutate_at(\"Genome Name\", str_replace, \"Terrestrial soil microbial communities from \", \"\") %&gt;% \n  # Use the first `-` to split the column in two\n  separate(`Genome Name`, c(\"Site\",\"Sample Name\"), \" - \") %&gt;% \n  # Get rid of the the common string \"S-comp-1\"\n  mutate_at(\"Sample Name\", str_replace, \"-comp-1\", \"\") %&gt;%\n  # separate the Sample Name into Site ID and plot info\n  separate(`Sample Name`, c(\"Site ID\",\"subplot.layer.date\"), \"_\", remove = FALSE,) %&gt;% \n  # separate the plot info into 3 columns\n  separate(`subplot.layer.date`, c(\"Subplot\", \"Layer\", \"Date\"), \"-\")\n\nRows: 1754 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Bin ID, Genome Name, Bin Quality, Bin Lineage, GTDB-Tk Taxonomy L...\ndbl  (10): IMG Genome ID, Bin Completeness, Bin Contamination, Total Number ...\ndate  (1): Date Added\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: Expected 6 pieces. Additional pieces discarded in 46 rows [3, 4, 24, 25, 26,\n27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 54, 232, 267, ...].\n\n\nWarning: Expected 6 pieces. Missing pieces filled with `NA` in 446 rows [1, 2, 9, 10,\n11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 46, 50, 53, ...].\n\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 624 rows [4, 7, 8, 236,\n237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\n...]."
  },
  {
    "objectID": "Final.html#this-code-was-run-to-help-filter-the-data",
    "href": "Final.html#this-code-was-run-to-help-filter-the-data",
    "title": "Final Project",
    "section": "This code was run to help filter the data:",
    "text": "This code was run to help filter the data:\n\n# Filters for Yellowstone\nNEON_MAGs_Yellow &lt;- NEON_MAGs %&gt;%\n  filter(`Site ID`==\"YELL\")\n\n\n# Filters for Gemmatimonadota\nNEON_MAGs_Gemmatimonadota &lt;-NEON_MAGs %&gt;%\n  filter(Phylum==\"Gemmatimonadota\")\n\n\nNEON_chemistry &lt;- read_tsv(\"data/NEON/neon_plot_soilChem1_metadata.tsv\") %&gt;% \n  # remove -COMP from genomicsSampleID\n  mutate_at(\"genomicsSampleID\", str_replace, \"-COMP\", \"\") \n\nRows: 87 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr   (5): genomicsSampleID, siteID, plotID, nlcdClass, horizon\ndbl  (11): decimalLatitude, decimalLongitude, elevation, soilTemp, d15N, org...\ndate  (1): collectionDate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNEON_MAGs_metagenomes &lt;- read_tsv(\"data/NEON/exported_img_data_Gs0161344_NEON.tsv\") %&gt;% \n  rename(`Genome Name` = `Genome Name / Sample Name`) %&gt;% \n  filter(str_detect(`Genome Name`, 're-annotation', negate = T)) %&gt;% \n  filter(str_detect(`Genome Name`, 'WREF plot', negate = T)) \n\nRows: 176 Columns: 46\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (18): Domain, Sequencing Status, Study Name, Genome Name / Sample Name, ...\ndbl (16): taxon_oid, IMG Genome ID, Depth In Meters, Elevation In Meters, Ge...\nlgl (12): Altitude In Meters, Chlorophyll Concentration, Longhurst Code, Lon...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n NEON_MAGs_metagenomes&lt;- NEON_MAGs_metagenomes %&gt;% \n  # Get rid of the the common string \"Soil microbial communities from \"\n  mutate_at(\"Genome Name\", str_replace, \"Terrestrial soil microbial communities from \", \"\") %&gt;% \n  # Use the first `-` to split the column in two\n  separate(`Genome Name`, c(\"Site\",\"Sample Name\"), \" - \") %&gt;% \n  # Get rid of the the common string \"-comp-1\"\n  mutate_at(\"Sample Name\", str_replace, \"-comp-1\", \"\") %&gt;%\n  # separate the Sample Name into Site ID and plot info\n  separate(`Sample Name`, c(\"Site ID\",\"subplot.layer.date\"), \"_\", remove = FALSE,) %&gt;% \n  # separate the plot info into 3 columns\n  separate(`subplot.layer.date`, c(\"Subplot\", \"Layer\", \"Date\"), \"-\") \n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [53].\n\n\n\nNEON_Full &lt;- NEON_MAGs%&gt;%\n  left_join(NEON_chemistry, by = c(\"Sample Name\" = \"genomicsSampleID\")) %&gt;%\n  left_join(NEON_MAGs_metagenomes, by = \"Sample Name\")"
  },
  {
    "objectID": "Final.html#this-code-used-to-generate-data-files-for-sankey-plots",
    "href": "Final.html#this-code-used-to-generate-data-files-for-sankey-plots",
    "title": "Final Project",
    "section": "This Code Used to Generate Data Files for Sankey Plots",
    "text": "This Code Used to Generate Data Files for Sankey Plots\n\nNEON_MAGs_Sankey &lt;- read_csv(\"data/NEON/GOLD_Study_ID_Gs0161344_NEON_edArchaea.csv\") %&gt;% \n  # remove columns that are not needed for data analysis\n  select(-c(`GOLD Study ID`, `Bin Methods`, `Created By`, `Date Added`)) %&gt;% \n  # create a new column with the Assembly Type\n  mutate(\"Assembly Type\" = case_when(`Genome Name` == \"NEON combined assembly\" ~ `Genome Name`,\n                            TRUE ~ \"Individual\")) %&gt;% \n  mutate_at(\"Assembly Type\", str_replace, \"NEON combined assembly\", \"Combined\") %&gt;% \n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"), \"; \", remove = FALSE) %&gt;% \n  # Get rid of the the common string \"Soil microbial communities from \"\n  mutate_at(\"Genome Name\", str_replace, \"Terrestrial soil microbial communities from \", \"\") %&gt;% \n  # Use the first `-` to split the column in two\n  separate(`Genome Name`, c(\"Site\",\"Sample Name\"), \" - \") %&gt;% \n  # Get rid of the the common string \"S-comp-1\"\n  mutate_at(\"Sample Name\", str_replace, \"-comp-1\", \"\") %&gt;%\n  # separate the Sample Name into Site ID and plot info\n  separate(`Sample Name`, c(\"Site ID\",\"subplot.layer.date\"), \"_\", remove = FALSE,) %&gt;% \n  # separate the plot info into 3 columns\n  separate(`subplot.layer.date`, c(\"Subplot\", \"Layer\", \"Date\"), \"-\") \n\nRows: 1754 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Bin ID, Genome Name, Bin Quality, Bin Lineage, GTDB-Tk Taxonomy L...\ndbl  (10): IMG Genome ID, Bin Completeness, Bin Contamination, Total Number ...\ndate  (1): Date Added\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: Expected 6 pieces. Additional pieces discarded in 46 rows [3, 4, 24, 25, 26,\n27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 54, 232, 267, ...].\n\n\nWarning: Expected 6 pieces. Missing pieces filled with `NA` in 446 rows [1, 2, 9, 10,\n11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 46, 50, 53, ...].\n\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 624 rows [4, 7, 8, 236,\n237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\n...].\n\n\n\nNEON_MAGs_ind_Sankey &lt;- NEON_MAGs_Sankey %&gt;% \n  filter(`Assembly Type` == \"Individual\") \n\n\nNEON_MAGs_co_Sankey &lt;- NEON_MAGs_Sankey %&gt;% \n  filter(`Assembly Type` == \"Combined\") \n\n\n# Select the GTDB Taxonomic lineage and separate into taxonomic levels\nsankey_data &lt;- NEON_MAGs_co_Sankey %&gt;% \n  select(`GTDB-Tk Taxonomy Lineage`) %&gt;% \n  # NAs are likely Archaea\n  replace_na(list(`GTDB-Tk Taxonomy Lineage` = 'Archaea')) %&gt;% \n  # Pavian format requires p__ etc\n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), \"; \") \n\nWarning: Expected 7 pieces. Missing pieces filled with `NA` in 615 rows [2, 3, 4, 5, 6,\n7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ...].\n\n\n\n# Fill in the NAs with the taxonomic the higher taxonomic level to the left\nsankey_data[] &lt;- t(apply(sankey_data, 1, zoo::na.locf))\n\n# Put the data into a format that can be read by the Sankey App\n\nsankey_data &lt;- sankey_data %&gt;% \n  unite(col = \"classification\", c(Domain, Phylum, Class, Order, Family, Genus, Species), sep='; ') %&gt;% \n  mutate_at(\"classification\", str_replace, \"Archaea\", \"d__Archaea\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"Bacteria\", \"d__Bacteria\") %&gt;%  \n  mutate_at(\"classification\", str_replace, \"; \", \"|p__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|c__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|o__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|f__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|g__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|s__\")  \n\n# Create format for Pavian with counts for each taxonomic level\nsankey_data_s &lt;- sankey_data\nsankey_data_g &lt;- sankey_data\nsankey_data_f &lt;- sankey_data\nsankey_data_o &lt;- sankey_data\nsankey_data_c &lt;- sankey_data\nsankey_data_p &lt;- sankey_data\nsankey_data_d &lt;- sankey_data\n\nsankey_data_g$classification &lt;- sub(\"\\\\|s__.*\", \"\", sankey_data_g$classification)  \nsankey_data_f$classification &lt;- sub(\"\\\\|g__.*\", \"\", sankey_data_f$classification)  \nsankey_data_o$classification &lt;- sub(\"\\\\|f__.*\", \"\", sankey_data_o$classification)  \nsankey_data_c$classification &lt;- sub(\"\\\\|o__.*\", \"\", sankey_data_c$classification)  \nsankey_data_p$classification &lt;- sub(\"\\\\|c__.*\", \"\", sankey_data_p$classification)  \nsankey_data_d$classification &lt;- sub(\"\\\\|p__.*\", \"\", sankey_data_d$classification)  \n\nsankey_data_allTaxa &lt;- bind_rows(sankey_data_s, sankey_data_g, sankey_data_f, sankey_data_o, sankey_data_c, sankey_data_p, sankey_data_d) %&gt;% \n  mutate(classification = as.factor(classification)) %&gt;% \n  count(classification) %&gt;% \n# rename for Pavian format\n  rename(`#SampleID` = `classification`) %&gt;% \n  rename(`Metaphlan2_Analysis` = `n`) \n\n# Write file to input to Pavian Sankey\nwrite_tsv(sankey_data_allTaxa, \"data/NEON/NEON_MAG_co_pavian.txt\")\n\n\nNEON_MAGs_ind_Gemmatimonadota &lt;- NEON_MAGs_ind_Sankey %&gt;% \n  filter(Phylum == \"Gemmatimonadota\") \n\n\nsankey_data &lt;- NEON_MAGs_ind_Gemmatimonadota %&gt;% \n  select(`GTDB-Tk Taxonomy Lineage`) %&gt;% \n  # NAs are likely Archaea\n  replace_na(list(`GTDB-Tk Taxonomy Lineage` = 'Archaea')) %&gt;% \n  # Pavian format requires p__ etc\n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), \"; \") \n\nWarning: Expected 7 pieces. Missing pieces filled with `NA` in 16 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].\n\n\n\n# Fill in the NAs with the taxonomic the higher taxonomic level to the left\nsankey_data[] &lt;- t(apply(sankey_data, 1, zoo::na.locf))\n\n# Put the data into a format that can be read by the Sankey App\n\nsankey_data &lt;- sankey_data %&gt;% \n  unite(col = \"classification\", c(Domain, Phylum, Class, Order, Family, Genus, Species), sep='; ') %&gt;% \n  mutate_at(\"classification\", str_replace, \"Archaea\", \"d__Archaea\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"Bacteria\", \"d__Bacteria\") %&gt;%  \n  mutate_at(\"classification\", str_replace, \"; \", \"|p__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|c__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|o__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|f__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|g__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|s__\")  \n\n# Create format for Pavian with counts for each taxonomic level\nsankey_data_s &lt;- sankey_data\nsankey_data_g &lt;- sankey_data\nsankey_data_f &lt;- sankey_data\nsankey_data_o &lt;- sankey_data\nsankey_data_c &lt;- sankey_data\nsankey_data_p &lt;- sankey_data\nsankey_data_d &lt;- sankey_data\n\nsankey_data_g$classification &lt;- sub(\"\\\\|s__.*\", \"\", sankey_data_g$classification)  \nsankey_data_f$classification &lt;- sub(\"\\\\|g__.*\", \"\", sankey_data_f$classification)  \nsankey_data_o$classification &lt;- sub(\"\\\\|f__.*\", \"\", sankey_data_o$classification)  \nsankey_data_c$classification &lt;- sub(\"\\\\|o__.*\", \"\", sankey_data_c$classification)  \nsankey_data_p$classification &lt;- sub(\"\\\\|c__.*\", \"\", sankey_data_p$classification)  \nsankey_data_d$classification &lt;- sub(\"\\\\|p__.*\", \"\", sankey_data_d$classification)  \n\nsankey_data_ind_GEM &lt;- bind_rows(sankey_data_s, sankey_data_g, sankey_data_f, sankey_data_o, sankey_data_c, sankey_data_p, sankey_data_d) %&gt;% \n  mutate(classification = as.factor(classification)) %&gt;% \n  count(classification) %&gt;% \n# rename for Pavian format\n  rename(`#SampleID` = `classification`) %&gt;% \n  rename(`Metaphlan2_Analysis` = `n`) \n\n# Write file to input to Pavian Sankey\nwrite_tsv(sankey_data_ind_GEM, \"NEON_MAG_ind_pavian.txt\")\n\n\nNEON_MAGs_co_Gemmatimonadota &lt;- NEON_MAGs_co_Sankey %&gt;% \n  filter(Phylum == \"Gemmatimonadota\") \n\n\nsankey_data &lt;- NEON_MAGs_co_Gemmatimonadota %&gt;% \n  select(`GTDB-Tk Taxonomy Lineage`) %&gt;% \n  # NAs are likely Archaea\n  replace_na(list(`GTDB-Tk Taxonomy Lineage` = 'Archaea')) %&gt;% \n  # Pavian format requires p__ etc\n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), \"; \") \n\nWarning: Expected 7 pieces. Missing pieces filled with `NA` in 6 rows [1, 2, 3, 4, 5,\n6].\n\n\n\n# Fill in the NAs with the taxonomic the higher taxonomic level to the left\nsankey_data[] &lt;- t(apply(sankey_data, 1, zoo::na.locf))\n\n# Put the data into a format that can be read by the Sankey App\n\nsankey_data &lt;- sankey_data %&gt;% \n  unite(col = \"classification\", c(Domain, Phylum, Class, Order, Family, Genus, Species), sep='; ') %&gt;% \n  mutate_at(\"classification\", str_replace, \"Archaea\", \"d__Archaea\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"Bacteria\", \"d__Bacteria\") %&gt;%  \n  mutate_at(\"classification\", str_replace, \"; \", \"|p__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|c__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|o__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|f__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|g__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|s__\")  \n\n# Create format for Pavian with counts for each taxonomic level\nsankey_data_s &lt;- sankey_data\nsankey_data_g &lt;- sankey_data\nsankey_data_f &lt;- sankey_data\nsankey_data_o &lt;- sankey_data\nsankey_data_c &lt;- sankey_data\nsankey_data_p &lt;- sankey_data\nsankey_data_d &lt;- sankey_data\n\nsankey_data_g$classification &lt;- sub(\"\\\\|s__.*\", \"\", sankey_data_g$classification)  \nsankey_data_f$classification &lt;- sub(\"\\\\|g__.*\", \"\", sankey_data_f$classification)  \nsankey_data_o$classification &lt;- sub(\"\\\\|f__.*\", \"\", sankey_data_o$classification)  \nsankey_data_c$classification &lt;- sub(\"\\\\|o__.*\", \"\", sankey_data_c$classification)  \nsankey_data_p$classification &lt;- sub(\"\\\\|c__.*\", \"\", sankey_data_p$classification)  \nsankey_data_d$classification &lt;- sub(\"\\\\|p__.*\", \"\", sankey_data_d$classification)  \n\nsankey_data_ind_GEM &lt;- bind_rows(sankey_data_s, sankey_data_g, sankey_data_f, sankey_data_o, sankey_data_c, sankey_data_p, sankey_data_d) %&gt;% \n  mutate(classification = as.factor(classification)) %&gt;% \n  count(classification) %&gt;% \n# rename for Pavian format\n  rename(`#SampleID` = `classification`) %&gt;% \n  rename(`Metaphlan2_Analysis` = `n`) \n\n# Write file to input to Pavian Sankey\nwrite_tsv(sankey_data_ind_GEM, \"NEON_MAG_co_gem.txt\")\n\n\nNEON_MAGs_YELL &lt;- NEON_MAGs %&gt;%\n  filter(`Site ID`== \"YELL\")\n\n\nsankey_data &lt;- NEON_MAGs_YELL %&gt;% \n  select(`GTDB-Tk Taxonomy Lineage`) %&gt;% \n  # NAs are likely Archaea\n  replace_na(list(`GTDB-Tk Taxonomy Lineage` = 'Archaea')) %&gt;% \n  # Pavian format requires p__ etc\n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), \"; \") \n\nWarning: Expected 7 pieces. Missing pieces filled with `NA` in 50 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n\n# Fill in the NAs with the taxonomic the higher taxonomic level to the left\nsankey_data[] &lt;- t(apply(sankey_data, 1, zoo::na.locf))\n\n# Put the data into a format that can be read by the Sankey App\n\nsankey_data &lt;- sankey_data %&gt;% \n  unite(col = \"classification\", c(Domain, Phylum, Class, Order, Family, Genus, Species), sep='; ') %&gt;% \n  mutate_at(\"classification\", str_replace, \"Archaea\", \"d__Archaea\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"Bacteria\", \"d__Bacteria\") %&gt;%  \n  mutate_at(\"classification\", str_replace, \"; \", \"|p__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|c__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|o__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|f__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|g__\") %&gt;% \n  mutate_at(\"classification\", str_replace, \"; \", \"|s__\")  \n\n# Create format for Pavian with counts for each taxonomic level\nsankey_data_s &lt;- sankey_data\nsankey_data_g &lt;- sankey_data\nsankey_data_f &lt;- sankey_data\nsankey_data_o &lt;- sankey_data\nsankey_data_c &lt;- sankey_data\nsankey_data_p &lt;- sankey_data\nsankey_data_d &lt;- sankey_data\n\nsankey_data_g$classification &lt;- sub(\"\\\\|s__.*\", \"\", sankey_data_g$classification)  \nsankey_data_f$classification &lt;- sub(\"\\\\|g__.*\", \"\", sankey_data_f$classification)  \nsankey_data_o$classification &lt;- sub(\"\\\\|f__.*\", \"\", sankey_data_o$classification)  \nsankey_data_c$classification &lt;- sub(\"\\\\|o__.*\", \"\", sankey_data_c$classification)  \nsankey_data_p$classification &lt;- sub(\"\\\\|c__.*\", \"\", sankey_data_p$classification)  \nsankey_data_d$classification &lt;- sub(\"\\\\|p__.*\", \"\", sankey_data_d$classification)  \n\nsankey_data_ind_GEM &lt;- bind_rows(sankey_data_s, sankey_data_g, sankey_data_f, sankey_data_o, sankey_data_c, sankey_data_p, sankey_data_d) %&gt;% \n  mutate(classification = as.factor(classification)) %&gt;% \n  count(classification) %&gt;% \n# rename for Pavian format\n  rename(`#SampleID` = `classification`) %&gt;% \n  rename(`Metaphlan2_Analysis` = `n`) \n\n# Write file to input to Pavian Sankey\nwrite_tsv(sankey_data_ind_GEM, \"NEON_MAG_YELL.txt\")"
  },
  {
    "objectID": "Final.html#preparing-code-for-phylogenic-trees",
    "href": "Final.html#preparing-code-for-phylogenic-trees",
    "title": "Final Project",
    "section": "Preparing Code for Phylogenic Trees",
    "text": "Preparing Code for Phylogenic Trees\n\nNEON_MAGs_Tree &lt;- read_csv(\"data/NEON/GOLD_Study_ID_Gs0161344_NEON_2024_4_21.csv\") %&gt;% \n  # remove columns that are not needed for data analysis\n  select(-c(`GOLD Study ID`, `Bin Methods`, `Created By`, `Date Added`, `Bin Lineage`)) %&gt;% \n  # create a new column with the Assembly Type\n  mutate(\"Assembly Type\" = case_when(`Genome Name` == \"NEON combined assembly\" ~ `Genome Name`,\n                            TRUE ~ \"Individual\")) %&gt;% \n  mutate_at(\"Assembly Type\", str_replace, \"NEON combined assembly\", \"Combined\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"d__\", \"\") %&gt;%  \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"p__\", \"\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"c__\", \"\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"o__\", \"\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"f__\", \"\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"g__\", \"\") %&gt;% \n  mutate_at(\"GTDB-Tk Taxonomy Lineage\", str_replace, \"s__\", \"\") %&gt;%\n  separate(`GTDB-Tk Taxonomy Lineage`, c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), \";\", remove = FALSE) %&gt;% \n  mutate_at(\"Domain\", na_if,\"\") %&gt;% \n  mutate_at(\"Phylum\", na_if,\"\") %&gt;% \n  mutate_at(\"Class\", na_if,\"\") %&gt;% \n  mutate_at(\"Order\", na_if,\"\") %&gt;% \n  mutate_at(\"Family\", na_if,\"\") %&gt;% \n  mutate_at(\"Genus\", na_if,\"\") %&gt;% \n  mutate_at(\"Species\", na_if,\"\") %&gt;% \n  \n  # Get rid of the the common string \"Soil microbial communities from \"\n  mutate_at(\"Genome Name\", str_replace, \"Terrestrial soil microbial communities from \", \"\") %&gt;% \n  # Use the first `-` to split the column in two\n  separate(`Genome Name`, c(\"Site\",\"Sample Name\"), \" - \") %&gt;% \n  # Get rid of the the common string \"S-comp-1\"\n  mutate_at(\"Sample Name\", str_replace, \"-comp-1\", \"\") %&gt;%\n  # separate the Sample Name into Site ID and plot info\n  separate(`Sample Name`, c(\"Site ID\",\"subplot.layer.date\"), \"_\", remove = FALSE,) %&gt;% \n  # separate the plot info into 3 columns\n  separate(`subplot.layer.date`, c(\"Subplot\", \"Layer\", \"Date\"), \"-\")\n\nRows: 1754 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): Bin ID, Genome Name, Bin Quality, Bin Lineage, GTDB-Tk Taxonomy L...\ndbl  (10): IMG Genome ID, Bin Completeness, Bin Contamination, Total Number ...\ndate  (1): Date Added\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 624 rows [1131, 1132,\n1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,\n1146, 1147, 1148, 1149, 1150, ...].\n\n\n\nNEON_metagenomes &lt;- read_tsv(\"data/NEON/exported_img_data_Gs0161344_NEON.tsv\") %&gt;% \n  select(-c(`Domain`, `Sequencing Status`, `Sequencing Center`)) %&gt;% \n  rename(`Genome Name` = `Genome Name / Sample Name`) %&gt;% \n  filter(str_detect(`Genome Name`, 're-annotation', negate = T)) %&gt;% \n  filter(str_detect(`Genome Name`, 'WREF plot', negate = T)) \n\nRows: 176 Columns: 46\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (18): Domain, Sequencing Status, Study Name, Genome Name / Sample Name, ...\ndbl (16): taxon_oid, IMG Genome ID, Depth In Meters, Elevation In Meters, Ge...\nlgl (12): Altitude In Meters, Chlorophyll Concentration, Longhurst Code, Lon...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNEON_metagenomes &lt;- NEON_metagenomes %&gt;% \n  # Get rid of the the common string \"Soil microbial communities from \"\n  mutate_at(\"Genome Name\", str_replace, \"Terrestrial soil microbial communities from \", \"\") %&gt;% \n  # Use the first `-` to split the column in two\n  separate(`Genome Name`, c(\"Site\",\"Sample Name\"), \" - \") %&gt;% \n  # Get rid of the the common string \"-comp-1\"\n  mutate_at(\"Sample Name\", str_replace, \"-comp-1\", \"\") %&gt;%\n  # separate the Sample Name into Site ID and plot info\n  separate(`Sample Name`, c(\"Site ID\",\"subplot.layer.date\"), \"_\", remove = FALSE,) %&gt;% \n  # separate the plot info into 3 columns\n  separate(`subplot.layer.date`, c(\"Subplot\", \"Layer\", \"Date\"), \"-\") \n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [53].\n\n\n\nNEON_chemistry &lt;- read_tsv(\"data/NEON/neon_plot_soilChem1_metadata.tsv\") %&gt;% \n  # remove -COMP from genomicsSampleID\n  mutate_at(\"genomicsSampleID\", str_replace, \"-COMP\", \"\") \n\nRows: 87 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr   (5): genomicsSampleID, siteID, plotID, nlcdClass, horizon\ndbl  (11): decimalLatitude, decimalLongitude, elevation, soilTemp, d15N, org...\ndate  (1): collectionDate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNEON_MAGs_metagenomes_chemistry &lt;- NEON_MAGs %&gt;% \n  left_join(NEON_metagenomes, by = \"Sample Name\") %&gt;% \n  left_join(NEON_chemistry, by = c(\"Sample Name\" = \"genomicsSampleID\")) %&gt;% \n  rename(\"label\" = \"Bin ID\")\n\n\ntree_arc &lt;- read.tree(\"data/NEON/gtdbtk.ar53.decorated.tree\")\ntree_bac &lt;- read.tree(\"data/NEON/gtdbtk.bac120.decorated.tree\")\n\n\n# Make a vector with the internal node labels\nnode_vector_bac = c(tree_bac$tip.label,tree_bac$node.label)\n\n# Search for your Phylum or Class to get the node\ngrep(\"Gemmatimonadota\", node_vector_bac, value = TRUE)\n\n[1] \"'1.0:p__Gemmatimonadota; c__Gemmatimonadetes'\"\n\n\n\nmatch(grep(\"Gemmatimonadota\", node_vector_bac, value = TRUE), node_vector_bac)\n\n[1] 2485\n\n\n\n# First need to preorder tree before extracting. N\ntree_bac_preorder &lt;- Preorder(tree_bac)\ntree_Gemmatimonadota &lt;- Subtree(tree_bac_preorder, 2485)\n\n\nNEON_MAGs_metagenomes_chemistry_CLBJ &lt;- NEON_MAGs_metagenomes_chemistry %&gt;% \n  filter(`Site ID.x` == \"YELL\") %&gt;% \n  filter(Domain == \"Bacteria\")\n\n\n# Make a vector of the MAGs labels\nCLBJ_MAGs_label &lt;- NEON_MAGs_metagenomes_chemistry_CLBJ$label\n\n\n# Use appropriate Bacteria or Archaea tree to select your site MAG labels\ntree_bac_CLBJ_MAGs &lt;-drop.tip(tree_bac,tree_bac$tip.label[-match(CLBJ_MAGs_label, tree_bac$tip.label)])"
  },
  {
    "objectID": "Final.html#yellowstone",
    "href": "Final.html#yellowstone",
    "title": "Final Project",
    "section": "Yellowstone",
    "text": "Yellowstone\n\nkable(\nproject_groups &lt;- read_tsv(\"data/NEON/project_groups.tsv\") \n)\n\nRows: 18 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (9): Domain, Sequencing Status, Study Name, Genome Name / Sample Name, S...\ndbl (6): taxon_oid, IMG Genome ID, Latitude, Longitude, Genome Size  * assem...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntaxon_oid\nDomain\nSequencing Status\nStudy Name\nGenome Name / Sample Name\nSequencing Center\nIMG Genome ID\nPhylum\nClass\nGOLD Study ID\nEcosystem Subtype\nLatitude\nLongitude\nGenome Size * assembled\nGene Count * assembled\n\n\n\n\n3300069261\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_051-M-20210705-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069261\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95428\n-110.5416\n2764498655\n6957571\n\n\n3300060744\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_016-M-20210708-comp-1\nDOE Joint Genome Institute (JGI)\n3300060744\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.96577\n-110.5837\n1035151817\n1787875\n\n\n3300061626\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_048-M-20210707-comp-1\nDOE Joint Genome Institute (JGI)\n3300061626\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95127\n-110.5366\n747543128\n1371663\n\n\n3300069273\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_048-M-20210707-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069273\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95127\n-110.5366\n1445675622\n3657230\n\n\n3300069238\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_012-O-20210708-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069238\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.94461\n-110.4337\n3125604789\n7412587\n\n\n3300069283\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_002-M-20210706-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069283\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.93247\n-110.6349\n1084617294\n2762045\n\n\n3300061637\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_003-M-20210708-comp-1\nDOE Joint Genome Institute (JGI)\n3300061637\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95478\n-110.5332\n1393141085\n2453808\n\n\n3300069234\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_016-M-20210708-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069234\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.96577\n-110.5837\n1697741488\n3962632\n\n\n3300060647\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_009-M-20210706-comp-1\nDOE Joint Genome Institute (JGI)\n3300060647\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.97031\n-110.5019\n1136012974\n1986999\n\n\n3300061625\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_051-M-20210705-comp-1\nDOE Joint Genome Institute (JGI)\n3300061625\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95428\n-110.5416\n1465893308\n2677575\n\n\n3300061175\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_012-O-20210708-comp-1\nDOE Joint Genome Institute (JGI)\n3300061175\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.94461\n-110.4337\n1813525940\n3135710\n\n\n3300060662\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_005-M-20210708-comp-1\nDOE Joint Genome Institute (JGI)\n3300060662\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.94838\n-110.6314\n773391452\n1440274\n\n\n3300069268\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_046-M-20210705-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069268\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95236\n-110.5416\n1874275737\n4830121\n\n\n3300069213\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_003-M-20210708-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069213\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95478\n-110.5332\n2438396634\n5878161\n\n\n3300069252\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_005-M-20210708-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069252\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.94838\n-110.6314\n1634258714\n4307086\n\n\n3300060729\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_046-M-20210705-comp-1\nDOE Joint Genome Institute (JGI)\n3300060729\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.95236\n-110.5416\n929469631\n1698143\n\n\n3300069242\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_009-M-20210706-comp-1 re-annotation\nDOE Joint Genome Institute (JGI)\n3300069242\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.97031\n-110.5019\n1986905664\n4778529\n\n\n3300060648\n*Microbiome\nPermanent Draft\nTerrestrial soil microbial communities from various NEON sites located in USA and Puerto Rico\nTerrestrial soil microbial communities from Yellowstone NP, Wyoming, USA - YELL_002-M-20210706-comp-1\nDOE Joint Genome Institute (JGI)\n3300060648\nEnvironmental\nTerrestrial\nGs0161344\nTemperate forest\n44.93247\n-110.6349\n559493798\n1017974\n\n\n\n\n\nTable 1: This table shows the different phylums present at Yellowstone National Park as well as some information about them including genome size and gene count\n\ndatatable(\n  NEON_MAGs_Ind_tax %&gt;% \n    select(c(`Genome Name`, `Class`)) %&gt;%\n    filter(str_detect(`Genome Name`, 'YELL')) %&gt;%\n    count(Class, sort = TRUE)\n)\n\n\n\n\n\nTable 2: This table shows the different Classes found in Yellowstone Nation Park as well as the number of times they were counted at that site represented by the value (n)\n\nNEON_MAGs_Yellow%&gt;%\n  ggplot(aes(y=Phylum))+\n  geom_bar()+\n  labs(title = \"Phylum Counts at Yellowstone National Park\")\n\n\n\n\n\n\n\n\nFigure 1: This bar graph shows the different phylums present at Yellowstone NP and how many times they appeared in the collected samples\n\nNEON_MAGs_Yellow %&gt;%   \nggplot(aes(x = `Total Number of Bases`, y = `Phylum`)) +\n  geom_point()+\n  labs(title = \"Phylum Size at Yellowstone National Park\")\n\n\n\n\n\n\n\n\nFigure 2: This graph shows the various counts of each of the phylums located in Yellowstone NP and the number of bases in their genome. Since every count is shown more popular phylums will appear more.\n\nggplotly(\n  ggplot(data = NEON_MAGs_Yellow, aes(x = `Gene Count`, y = `Scaffold Count`)) +\n    geom_point(aes(color = Phylum, shape = Phylum))+\n    labs(title = \"Phylum Scaffold Count vs Gene Count\")\n )\n\nWarning: The shape palette can deal with a maximum of 6 discrete values because more\nthan 6 becomes difficult to discriminate\nℹ you have requested 7 values. Consider specifying shapes manually if you need\n  that many have them.\n\n\n\n\n\n\nFigure 3: This interactive graph shows the relationship between the size of the scaffolds and the genes for each of the different phylum present at the site. The lower the scaffold count the higher the quality of the sample.\n\nNEON_MAGs_Yellow %&gt;% \nggplot(aes(x=`Gene Count`, y= `Bin Completeness`)) +\n  geom_point(aes(color = Phylum))+\n  labs(title = \"Phylum Completeness vs Gene Count\")\n\n\n\n\n\n\n\n\nFigure 4: This graph shows which phylum have missing single-copy gene markers (Bin Completeness) compared to the gene count. The higher the bin completeness the less missing single-copy gene markers.\n\nNEON_MAGs_Yellow %&gt;% \n  filter(is.na(Phylum) | is.na(Class) | is.na(Order) | is.na(Family) | is.na(Genus)) %&gt;%\nggplot(aes(x = `Bin Quality`)) +\n  geom_bar(position = position_dodge2(width = 0.9, preserve = \"single\")) +\n  coord_flip()+\n  labs(title = \"Phylum Quality at Yellowstone National Park\")\n\n\n\n\n\n\n\n\nFigure 5: This graph shows the number of High Quality (HQ) and Medium Quality (MQ) samples taken at Yellowstone NP\n\nggtree(tree_bac_CLBJ_MAGs, layout=\"circular\")  %&lt;+%\n  NEON_MAGs_metagenomes_chemistry +\n  geom_point(mapping=aes(color=Phylum))+\n  labs(title = \"Phylogenetic Tree for Yellowstone National Park\")\n\n\n\n\n\n\n\n\nFigure 6: This figure shows the ancestry of each of the phylum present at Yellowstone National Park and how they evolved apart from each other.\n\nknitr::include_url(\"data/sankey-NEON_MAG_YELL.txt.html\")\n\n\n\nFigure 7: Sankey Tree For the phylum present at Yellowstone National Park"
  },
  {
    "objectID": "Final.html#gemmatimonadota",
    "href": "Final.html#gemmatimonadota",
    "title": "Final Project",
    "section": "Gemmatimonadota",
    "text": "Gemmatimonadota\n\ndatatable(\n  NEON_MAGs_Gemmatimonadota %&gt;%\n    select(c(`Site`,`GTDB-Tk Taxonomy Lineage`, `Gene Count`, `Total Number of Bases`, `Bin Quality`))\n  )\n\n\n\n\n\nTable 3: This table shows the sites where the bacterium Gemmatimonadota is present as well as how many samples were recovered from each site. Other information like gene and base count is also shown.\n\nNEON_MAGs_Gemmatimonadota %&gt;%   \nggplot(aes(x = Site, y = `GTDB-Tk Taxonomy Lineage`)) +\n  geom_point() +\n  coord_flip()+\n  theme(axis.text.x = element_text(angle=60, vjust=1, hjust=1))+\n  labs(title = \"Gemmatimonadota Lineages at Each Site\", y = \"Lineages\")\n\n\n\n\n\n\n\n\nFigure 8: This graph shows where each of the different lineages of gemmatimonadota are present at each site\n\nNEON_MAGs_Gemmatimonadota%&gt;%\n  ggplot(aes(y=Site))+\n  geom_bar()+\n  labs(title= \"Gemmatimonadota Counts at Each Site\")\n\n\n\n\n\n\n\n\nFigure 9: This graph shows the total counts of gemmatimonadota at each site\n\nNEON_MAGs_Gemmatimonadota %&gt;% \n  filter(is.na(Phylum) | is.na(Class) | is.na(Order) | is.na(Family) | is.na(Genus)) %&gt;%\nggplot(aes(x = `Bin Quality`)) +\n  geom_bar(position = position_dodge2(width = 0.9, preserve = \"single\")) +\n  coord_flip()+\n  labs(title = \"Gemmatimonadota Quality\")\n\n\n\n\n\n\n\n\nFigure 10: This graph shows the number of High Quality (HQ) and Medium Quality (MQ) samples of gemmatimonadota taken at various sites.\n\nNEON_Gemmatimonadota &lt;- NEON_Full%&gt;%\n  filter(`Phylum` == \"Gemmatimonadota\")\n\nNEON_Gemmatimonadota %&gt;%   \nggplot(aes(x = `Total Number of Bases`, y = `Site.x`)) +\n  geom_point()+\n  labs(title = \"Gemmatimonadota Base Size at Each Site\", y = \"Site\")\n\n\n\n\n\n\n\n\nFigure 11: This graph shows the size of gemmatimonadota at each site\n\nknitr::include_url(\"data/sankey-NEON_MAG_ind_pavian.txt.html\")\n\n\n\nFigure 12: Sankey Tree of the individual assemblies of Gemmatimonadota\n\nknitr::include_url(\"data/sankey-NEON_MAG_co_gem.txt.html\")\n\n\n\nFigure 13: Sankey Tree of the combined assemblies of Gemmatimonadota\n\nggtree(tree_Gemmatimonadota)  %&lt;+%\n  NEON_MAGs_metagenomes_chemistry + \n  geom_tiplab(size=2, hjust=-.1) +\n  xlim(0,20) +\n  geom_point(mapping=aes(color=`Ecosystem Subtype`)) +\n  labs(title = \"Phylogenetic Tree of Gemmatimonadota\")\n\n\n\n\n\n\n\n\nFigure 14: This figure shows the evolutionary tree of gemmatimonadota as well as which ecosystem each lineage was found in\n\nNEON_Gemmatimonadota %&gt;%   \nggplot(aes(x = `soilTemp`, y = `Site.x`)) +\n  geom_boxplot()+\n  labs(title = \"Soil Temperatures\", x = \"Soil Temperature\", y = \"Site\")\n\nWarning: Removed 6 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nFigure 15: This graph shows the average soil temperatures in Celsius for each site where gemmatimonadota was found in.\n\nggplot(data = NEON_Gemmatimonadota, aes(x = `Ecosystem Subtype`, y = `soilTemp`)) +\n    geom_point(aes(color=Family))+\n  labs(title = \"Soil Temperatures Expanded\", y = \"Soil Temperature\")\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nFigure 16: This graph shows the soil temperature for each sample as well as which ecosystem it was taken from. The family of gemmatimonadota for each sample is also shown."
  },
  {
    "objectID": "Final.html#yellowstone-1",
    "href": "Final.html#yellowstone-1",
    "title": "Final Project",
    "section": "Yellowstone",
    "text": "Yellowstone\nThe results show that a particular phylum of bacteria seems to be present the most at Yellowstone NP (Figure 1). Actinobacteriota is found in most samples significantly more than any other phylum. Actinobacteriota also has a smaller base count compared to the others (Figure 2). Looking at the phylogenetic tree we can see that Actinobacteriota is very diverse in its own phylum (Figure 6). Its also interesting to see that Chloroflexota hasn’t diverged as much from the last common ancestor shared between all the phylum. We wanted to analyze all of the phylum present in more detail and found that many of the samples were of medium quality (Figure 5). If you take a look at the scaffold count many are quiet high, which means they are of lower quality (Figure 3). To see if the larger the size of the bacterium the lower the quality we compared the two. We can see from the results that for some of the phylum the more genes present the higher the scaffold count. Proteobacteria for example follows an almost linear increase. Patescibacteria has the lowest scaffold count of any phylum, but it also has the fewest genes. Actinobacteriota has more samples with a lower scaffold count than the rest of the phylums. In general the more genes a bacterium has the higher the scaffold count and the lower the quality. We wanted to examine this further so we compared the completeness of each of the phylum to the gene count (Figure 4). This will show us if the reason why the quality is low is because as the gene count becomes larger more parts of the expected genome are missing. The results however don’t show that. The samples with the smallest gene count are also the most incomplete. More analysis needs to be done to figure out why that is the case."
  },
  {
    "objectID": "Final.html#gemmatimonadota-1",
    "href": "Final.html#gemmatimonadota-1",
    "title": "Final Project",
    "section": "Gemmatimonadota",
    "text": "Gemmatimonadota\nTaking a closer look at Gemmatimonadota we can see that it lives in a wide diversity of environments. The sites where the samples were found are spread all across the United States (Figure 8 and 9). This shows the bacterium isn’t clustered in one specific region and can thrive nearly anywhere. There are more samples found in Utah compared to the other sites so maybe this could be where it is most successful. The quality of the samples taken across all the sites is almost evenly split with just a bit more being medium quality (Figure 10). Looking at Figure 11 you’ll see a wide diversity in the size of genome across the sites. The Gemmatimonadota at Tucson Arizona have fewer base pairs than than the Gemmatimonadota at LBJ in Texas. Another interesting factor is that Gemmatimonadota doesn’t have a preferred climate or temperature. The sites where it was found could be arid, dry, cold, hot, or wet (Figure 14 and 15). Looking at the phylogenetic tree in Figure 14 we can see that Gemmatimonadota was found most often in shrublands. Something interesting we found was that two of the samples 33000616338_25 and 3300060695_66 are closely related however one lives in the tundra while the other lives in a temperate forest. Looking at the soild temperatures for each of the sites in figure 16 you’ll see that there is a massive difference between the two temperatures. We believe that because these two samples are closely related and they live in very different climates that Gemmatimonadota has evolved to be temperature resistant or highly adaptable. Further studies should be conducted such as placing one sample of Gemmatimonadota that lives in warm soil and placing it in colder soil then see if it survives or dies."
  }
]